# CHESS PROJECT

class Board:
    def __init__(self) -> None:
        self.rows = 8
        self.columns = 8

        self.alpha = 'abcdefgh'
        self.crv = []
        self.crd = []
        self.blank = '_'

        self.matrix = [[]]
        self.fen = 'tcbdrbct/pppppppp/8/8/8/8/PPPPPPPP/TCBDRBCT b - 1'
        self.parametrics_vars()

    def parametrics_vars(self) -> None:

        self.color = self.fen.split()[1]
        self.en_passant = self.fen.split()[2]
        self.move = self.fen.split()[3]

    def translate(self) -> None:

        fen_split = self.fen.split()
        fen_split[0] = fen_split[0].translate(str.maketrans('rnqkRNQK', 'tcdrTCDR'))
        fen_split[1] = fen_split[1].translate(str.maketrans('wb', 'bp'))
        self.fen = ' '.join(fen_split)

    def fen_decoding(self, columns: int) -> list:

        fen_split = self.fen.split()[0].split('/')
        matriz = []

        for i in range(columns):
            sublist = []
            for f in fen_split[i]:
                if f.isdigit():
                    sublist += [self.blank] * int(f)
                else:
                    sublist += f
            matriz.append(sublist)

        return matriz

    def plot(self) -> None:

        matriz = list(map(list, zip(*self.matrix)))
        matriz = matriz[::-1]

        for sublist in range(len(matriz)):
            print(matriz[sublist])

    def chess_start(self, trans: bool =False) -> None:

        fen_input = input('Digite o valor fen: ').strip()  # FEN input

        if fen_input:
            if len(fen_input.split()) != 4:
                raise SyntaxError('wrong input on fen notation')

            self.fen = fen_input

            if trans:
                self.translate()

            self.parametrics_vars()

        self.matrix = self.fen_decoding(columns=self.columns)  # FEN de-coding
        self.matrix = self.matrix[::-1]  # inverter matrix
        self.matrix = list(map(list, zip(*self.matrix)))  # transpor matrix
        self.plot()  # Plot start

    def function(self) -> None:

        for k in self.piece.k:          # Define direção
            for j in self.piece.j:          # Define sentido

                flag = i = 0

                while flag < self.piece.flag:   # Define o passo do movimento
                    i += 1

                    crv0 = self.crd[0] + i*j*k[0]
                    crv1 = self.crd[1] + i*j*k[1]

                    if not (self.rows - 1) >= crv0 >= 0 or not (self.columns - 1) >= crv1 >= 0:
                        break

                    if self.matrix[crv0][crv1] == self.piece.name:
                        self.crv.append(crv0)
                        self.crv.append(crv1)
                        break
                    elif self.matrix[crv0][crv1] != self.blank:
                        break

                    flag += 1

    def chess_move(self) -> None:

        inp = input('Digite seu lance: ')
        self.crd.append(self.alpha.index(inp[-2]))
        self.crd.append(int(inp[-1]) - 1)

        self.piece = Piece(inp[0], self.color)

        self.function()
        self.plot()


class Piece:
    def __init__(self, name, color):

        self.name = name
        self.color = color

        if 'T' in self.name:
            self.k = [[1, 0], [0, 1]]
            self.j = [1, -1]
            self.flag = float('inf')
        elif 'B' in self.name:
            self.k = [[1, 1], [1, -1]]
            self.j = [1, -1]
            self.flag = float('inf')
        elif 'C' in self.name:
            pass
        elif 'D' in self.name:
            self.k = [[1, 0], [0, 1], [1, 1], [1, -1]]
            self.j = [1, -1]
            self.flag = float('inf')
        elif 'R' in self.name:
            self.k = [[1, 0], [0, 1], [1, 1], [1, -1]]
            self.j = [1, -1]
            self.flag = 1
        elif self.name.islower():
            self.name = 'P'
            self.k = [[0, 1]]
            if self.color == 'b':
                self.j = [1]
            else:
                self.j = [-1]

        if self.color != 'b':
            self.name = self.name.lower()



board = Board()

board.chess_start()
board.chess_move()
